alpha = alpha, gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = NULL, niter = 2, avals_type = "BH")
# Input the covariance matrix through \code{Sigmafun}
Sigmafun <- function(i){
rho^(abs(1:n - i))
}
vars <- rep(1, n)
res1 <- dBH_mvt(tvals = tvals, df = df, Sigmafun = Sigmafun, vars = vars,
side = "right", alpha = alpha, gamma = NULL, niter = 1,
avals_type = "BH")
res2 <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = NULL, niter = 1, avals_type = "BH")
identical(res1, res2)
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 2.5
nalt <- 10
beta <- c(rep(mu1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
res
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 2.5 / sqrt(n)
nalt <- 10
beta <- c(rep(mu1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
res
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 0.1
nalt <- 10
beta <- c(rep(mu1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
res
?dBH_lm
document()
# Generate beta
n <- 150
p <- 100
beta1 <- 0.1
nalt <- 10
beta <- c(rep(mu1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
res
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 0.1
nalt <- 10
beta <- c(rep(beta1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
res
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 0.2
nalt <- 10
beta <- c(rep(beta1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
res
lpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
res
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 0.25
nalt <- 10
beta <- c(rep(beta1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
res
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 0.5
nalt <- 10
beta <- c(rep(beta1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
[Package dbh version 0.1.0 ]
n <- 150
p <- 100
beta1 <- 0.5
nalt <- 10
beta <- c(rep(beta1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
?dBH_mvt
n <- 100
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 10
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
# Generate the z-values
set.seed(1)
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Generate sigmahat and the t-values
df <- 50
sigmahat <- sqrt(rchisq(1, df = df) / df)
tvals <- zvals / sigmahat
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = NULL, niter = 2, avals_type = "BH")
# Input the covariance matrix through \code{Sigmafun}
Sigmafun <- function(i){
rho^(abs(1:n - i))
}
vars <- rep(1, n)
res1 <- dBH_mvt(tvals = tvals, df = df, Sigmafun = Sigmafun, vars = vars,
side = "right", alpha = alpha, gamma = NULL, niter = 1,
avals_type = "BH")
res2 <- dBH_mvt(tvals = tvals, df = df, Sigma = Sigma, side = "right",
alpha = alpha, gamma = NULL, niter = 1, avals_type = "BH")
identical(res1, res2)
?dBH_lm
n <- 150
p <- 100
beta1 <- 0.5
nalt <- 10
beta <- c(rep(beta1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
beta
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
library("devtools")
?dBH_lm
document()
?dBH_lm
# Generate beta
n <- 150
p <- 100
beta1 <- 0.5
nalt <- 10
beta <- c(rep(beta1, nalt), rep(0, p - nalt))
# Generate X and y
set.seed(1)
X <- matrix(rnorm(n * p), nrow = n)
y <- X %*% beta + rnorm(n)
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH_1(\alpha) for two-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dBH^2_1(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
# Run dSU_1(\alpha) with the geometrically increasing a-values for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "geom",
geom_fac = 2)
# Run dBY(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 1, avals_type = "BH")
# Run dBY^2(\alpha) for one-sided tests
res <- dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = NULL, niter = 2, avals_type = "BH")
dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
dBH_lm(y = y, X = X, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
tvals
df
Sigma
Sigmafun
vars
side
alpha
gamma
is_safe
avals
avals_type
geom_fac
eps
qcap
verbose
